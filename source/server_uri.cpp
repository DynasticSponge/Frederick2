//
// server_uri.cpp
// ~~~~~~~~~~~~~~
//
// Author: Joseph Adomatis
// Copyright (c) 2020 Joseph R Adomatis (joseph dot adomatis at gmail dot com)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <map>
#include <queue>
#include <string>
#include <vector>

#include "../headers/frederick2_namespace.hpp"
#include "../headers/server_enum.hpp"
#include "../headers/server_uri.hpp"

namespace enums = frederick2::httpEnums;
namespace server = frederick2::httpServer;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global variable definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global function definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri member definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////////////////////////

server::uri::uri()
{
    this->fragmentProvided = false;
    this->userInfoProvided = false;
    this->hostProvided = false;
    this->parametersProvided = false;
    this->pathProvided = false;
    this->portProvided = false;
    this->schemeProvided = false;
    this->port = -1;
    this->hostType = enums::uriHostType::IPV4_ADDRESS;
    this->scheme = enums::uriScheme::http;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getFragments
///////////////////////////////////////////////////////////////////////////////

std::vector<std::string> server::uri::getFragments()
{
    return(this->fragments);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getFragmentString
///////////////////////////////////////////////////////////////////////////////

std::string server::uri::getFragmentString()
{
    return(this->fullFragmentString);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getParameters
///////////////////////////////////////////////////////////////////////////////

strMAPstr server::uri::getParameters()
{
    return(this->parameters);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getParameterString
///////////////////////////////////////////////////////////////////////////////

std::string server::uri::getParameterString()
{
    return(this->fullParameterString);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getHost
///////////////////////////////////////////////////////////////////////////////

std::string server::uri::getHost()
{
    return(this->host);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getHostType
///////////////////////////////////////////////////////////////////////////////

frederick2::httpEnums::uriHostType server::uri::getHostType()
{
    return(this->hostType);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getPassword
///////////////////////////////////////////////////////////////////////////////

std::string server::uri::getPassword()
{
    return(this->password);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getPathString
///////////////////////////////////////////////////////////////////////////////

std::string server::uri::getPathString()
{
    std::string returnString;
    if(this->segments.size() == 0)
    {
        returnString.append("/");
    }
    else
    {
        for(auto index = this->segments.cbegin(); index != this->segments.cend(); index++)
        {
            returnString.append("/");
            returnString.append(*index);
        }
    }
    return(returnString);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getPort
///////////////////////////////////////////////////////////////////////////////

int server::uri::getPort()
{
    return(this->port);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getScheme
///////////////////////////////////////////////////////////////////////////////

frederick2::httpEnums::uriScheme server::uri::getScheme()
{
    return(this->scheme);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getSegments
///////////////////////////////////////////////////////////////////////////////

std::deque<std::string> server::uri::getSegments()
{
    return(this->segments);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getURIString
///////////////////////////////////////////////////////////////////////////////

std::string server::uri::getURIString()
{
    return(this->fullURIString);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::getUsername
///////////////////////////////////////////////////////////////////////////////

std::string server::uri::getUsername()
{
    return(this->username);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::hasFragments
///////////////////////////////////////////////////////////////////////////////

bool server::uri::hasFragments()
{
    return(this->fragmentProvided);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::hasHost
///////////////////////////////////////////////////////////////////////////////

bool server::uri::hasHost()
{
    return(this->hostProvided);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::hasParameters
///////////////////////////////////////////////////////////////////////////////

bool server::uri::hasParameters()
{
    return(this->parametersProvided);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::hasPath
///////////////////////////////////////////////////////////////////////////////

bool server::uri::hasPath()
{
    return(this->pathProvided);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::hasPort
///////////////////////////////////////////////////////////////////////////////

bool server::uri::hasPort()
{
    return(this->portProvided);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::hasScheme
///////////////////////////////////////////////////////////////////////////////

bool server::uri::hasScheme()
{
    return(this->schemeProvided);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::hasUserInfo
///////////////////////////////////////////////////////////////////////////////

bool server::uri::hasUserInfo()
{
    return(this->userInfoProvided);
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::addFragment
///////////////////////////////////////////////////////////////////////////////

void server::uri::addFragment(const std::string& fName)
{
    this->fragments.push_back(fName);
    this->fragmentProvided = true;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::addParameter
///////////////////////////////////////////////////////////////////////////////

void server::uri::addParameter(const std::string& pName, const std::string& pValue)
{
    auto search = this->parameters.find(pName);
    if(search == this->parameters.end())
    {
        this->parameters[pName] = pValue;                
    }
    else
    {
        std::string newValue{this->parameters[pName]}; 
        newValue.append(",");
        newValue.append(pValue);
        this->parameters[pName] = newValue;
    }
    this->parametersProvided = true;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::addSegment
///////////////////////////////////////////////////////////////////////////////

void server::uri::addSegment(const std::string& sName)
{
    this->segments.push_back(sName);
    this->pathProvided = true;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setFragmentString
///////////////////////////////////////////////////////////////////////////////

void server::uri::setFragmentString(const std::string& frags)
{
    this->fullFragmentString = frags;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setHost
///////////////////////////////////////////////////////////////////////////////

void server::uri::setHost(const std::string& inHost)
{
    this->host = inHost;
    this->hostProvided = true;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setHostType
///////////////////////////////////////////////////////////////////////////////

void server::uri::setHostType(frederick2::httpEnums::uriHostType type)
{
    this->hostType = type;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setParameterString
///////////////////////////////////////////////////////////////////////////////

void server::uri::setParameterString(const std::string& params)
{
    this->fullParameterString = params;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setPassword
///////////////////////////////////////////////////////////////////////////////

void server::uri::setPassword(const std::string& pWord)
{
    this->password = pWord;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setPort
///////////////////////////////////////////////////////////////////////////////

void server::uri::setPort(int inPort)
{
    this->port = inPort;
    this->portProvided = true;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setScheme
///////////////////////////////////////////////////////////////////////////////

void server::uri::setScheme(frederick2::httpEnums::uriScheme inScheme)
{
    this->scheme = inScheme;
    this->schemeProvided = true;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setURIString
///////////////////////////////////////////////////////////////////////////////

void server::uri::setURIString(const std::string& uriStr)
{
    this->fullURIString = uriStr;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setUserInfo
///////////////////////////////////////////////////////////////////////////////

void server::uri::setUserInfo(const std::string& uName, const std::string& pWord)
{
    this->username = uName;
    this->password = pWord;
    this->userInfoProvided = true;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// frederick2::httpServer::uri::setUsername
///////////////////////////////////////////////////////////////////////////////

void server::uri::setUsername(const std::string& uName)
{
    this->username = uName;
    this->userInfoProvided = true;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// Deconstructor
///////////////////////////////////////////////////////////////////////////////

server::uri::~uri()
{

}